# Generated by Django 5.2.7 on 2025-11-01 13:42

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("courses", "0005_aiconversation_aimessage_aifeedback_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="MockTest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("subject", models.CharField(max_length=100)),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("EASY", "Easy"),
                            ("MEDIUM", "Medium"),
                            ("HARD", "Hard"),
                        ],
                        default="MEDIUM",
                        max_length=20,
                    ),
                ),
                ("generated_from_content", models.TextField(blank=True, null=True)),
                ("ai_prompt", models.TextField(blank=True, null=True)),
                ("total_questions", models.PositiveIntegerField(default=10)),
                ("duration_minutes", models.PositiveIntegerField(default=30)),
                (
                    "passing_score",
                    models.DecimalField(decimal_places=2, default=60.0, max_digits=5),
                ),
                ("is_published", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mock_tests",
                        to="courses.course",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mock_tests",
                        to="courses.session",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        limit_choices_to={"role": "STUDENT"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mock_tests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MockTestAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("ABANDONED", "Abandoned"),
                        ],
                        default="IN_PROGRESS",
                        max_length=20,
                    ),
                ),
                (
                    "total_score",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                (
                    "max_score",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                (
                    "percentage",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                ("passed", models.BooleanField(default=False)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("submitted_at", models.DateTimeField(blank=True, null=True)),
                ("time_taken_minutes", models.PositiveIntegerField(default=0)),
                (
                    "scorecard_pdf",
                    models.FileField(blank=True, null=True, upload_to="scorecards/"),
                ),
                (
                    "mock_test",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attempts",
                        to="courses.mocktest",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_attempts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="MockTestQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("MCQ", "Multiple Choice"),
                            ("TRUE_FALSE", "True/False"),
                            ("SHORT_ANSWER", "Short Answer"),
                        ],
                        default="MCQ",
                        max_length=20,
                    ),
                ),
                ("question_text", models.TextField()),
                ("explanation", models.TextField(blank=True, null=True)),
                ("options", models.JSONField(blank=True, default=list)),
                ("correct_answer", models.CharField(max_length=500)),
                (
                    "points",
                    models.DecimalField(decimal_places=2, default=1.0, max_digits=5),
                ),
                ("bloom_level", models.CharField(blank=True, max_length=50, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "mock_test",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="courses.mocktest",
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="MockTestAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("selected_answer", models.CharField(max_length=500)),
                ("is_correct", models.BooleanField(default=False)),
                (
                    "points_earned",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                ("ai_feedback", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "attempt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="courses.mocktestattempt",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_answers",
                        to="courses.mocktestquestion",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RecommendedCourse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                ("reason", models.TextField()),
                ("rank", models.PositiveIntegerField(default=0)),
                (
                    "model_version",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("features_used", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendations",
                        to="courses.course",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_recommendations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["rank"],
            },
        ),
        migrations.CreateModel(
            name="SessionSummary",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("summary_text", models.TextField()),
                ("key_topics", models.JSONField(default=list)),
                ("action_items", models.JSONField(default=list)),
                (
                    "transcript_source",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("original_transcript", models.TextField(blank=True, null=True)),
                (
                    "ai_model_used",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                ("tokens_used", models.PositiveIntegerField(default=0)),
                ("is_visible_to_student", models.BooleanField(default=True)),
                ("is_visible_to_teacher", models.BooleanField(default=True)),
                (
                    "session",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_summary",
                        to="courses.session",
                    ),
                ),
            ],
            options={
                "ordering": ["-generated_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentProgressAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_sessions", models.PositiveIntegerField(default=0)),
                ("total_test_attempts", models.PositiveIntegerField(default=0)),
                (
                    "average_test_score",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                ("modules_completed", models.PositiveIntegerField(default=0)),
                ("modules_in_progress", models.PositiveIntegerField(default=0)),
                (
                    "completion_rate",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                (
                    "total_learning_hours",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                (
                    "avg_session_duration_minutes",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=6),
                ),
                ("last_activity_date", models.DateField(blank=True, null=True)),
                ("strengths", models.JSONField(default=list)),
                ("weaknesses", models.JSONField(default=list)),
                ("recommended_topics", models.JSONField(default=list)),
                ("learning_pace", models.CharField(default="MODERATE", max_length=20)),
                ("predicted_completion_date", models.DateField(blank=True, null=True)),
                ("at_risk_of_dropout", models.BooleanField(default=False)),
                (
                    "dropout_risk_score",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                ("computed_at", models.DateTimeField(auto_now=True)),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_analytics",
                        to="courses.course",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress_analytics",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-computed_at"],
            },
        ),
        migrations.AddIndex(
            model_name="mocktest",
            index=models.Index(
                fields=["student", "created_at"], name="courses_moc_student_96267a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="mocktest",
            index=models.Index(
                fields=["subject", "difficulty"], name="courses_moc_subject_17ad48_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="mocktestattempt",
            index=models.Index(
                fields=["student", "status", "started_at"],
                name="courses_moc_student_73bb7a_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="mocktestquestion",
            unique_together={("mock_test", "order")},
        ),
        migrations.AlterUniqueTogether(
            name="mocktestanswer",
            unique_together={("attempt", "question")},
        ),
        migrations.AlterUniqueTogether(
            name="recommendedcourse",
            unique_together={("student", "course")},
        ),
        migrations.AlterUniqueTogether(
            name="studentprogressanalytics",
            unique_together={("student", "course")},
        ),
    ]
